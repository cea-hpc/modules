language: generic

git:
  depth: 320

branches:
  except:
    - c-master
    - c-3.2

dist: trusty
sudo: false

matrix:
  include:
    # 3 package variants on major Tcl releases mixed with 2 install variants
    # run tests in code coverage mode on first installation variant
    # for each Tcl releases
    - env: CONFIGURE_OPTS='--with-tclsh=tclsh8.4 --disable-compat-version --disable-libtclenvmodules --prefix=/tmp/modules' COVERAGE='y'
           EXTRA_SCRIPT_PRETEST='make install-testmodulerc install-testetcrc install-testmodspath-empty' EXTRA_SCRIPT_POSTTEST='make uninstall-testconfig'
      addons:
        apt:
          sources:
            - sourceline: 'ppa:fish-shell/release-2'
          packages:
            - expect-dev
            - dejagnu
            - python-sphinx
            - bash
            - tcsh
            - ksh
            - zsh
            - fish
            - tcl8.4
            - perl
            - python
            - ruby
            - cmake3
            - r-base-core
    # install configuration file before test to trigger specific behaviors on initialization parts
    - env: CONFIGURE_OPTS='--with-tclsh=tclsh8.5 --disable-compat-version --disable-libtclenvmodules --enable-versioning --prefix=/tmp/modules --without-pager --enable-dotmodulespath' COVERAGE='y'
           EXTRA_SCRIPT_PRETEST='make install-testmodulerc install-testsiteconfig install-testmodspath' EXTRA_SCRIPT_POSTTEST='make uninstall-testconfig'
      addons:
        apt:
          sources:
            - sourceline: 'ppa:fish-shell/release-2'
          packages:
            - expect-dev
            - dejagnu
            - python-sphinx
            - bash
            - tcsh
            - ksh
            - zsh
            - fish
            - tcl8.5
            - perl
            - python
            - ruby
            - cmake3
            - r-base-core
    # also enable a display on this test case to validate x-resource behavior
    # check auto handling feature on this test configuration
    - env: CONFIGURE_OPTS='--with-tclsh=tclsh8.6 --disable-compat-version --disable-libtclenvmodules --prefix=/tmp/modules --with-pager=more --with-pager-opts=-X --enable-auto-handling' COVERAGE='y'
      before_script:
        - export DISPLAY=:99.0
        - sh -e /etc/init.d/xvfb start
        - sleep 3 # give xvfb some time to start
      addons:
        apt:
          sources:
            - sourceline: 'ppa:fish-shell/release-2'
          packages:
            - expect-dev
            - dejagnu
            - python-sphinx
            - bash
            - tcsh
            - ksh
            - zsh
            - fish
            - tcl8.6
            - perl
            - python
            - ruby
            - cmake3
            - r-base-core

    - env: CONFIGURE_OPTS='--with-tclsh=tclsh8.4 --prefix=/tmp/modules --enable-compat-version --with-tcl=/usr/lib/tcl8.4 --enable-versioning --disable-silent-shell-debug-support --disable-set-shell-startup --disable-quarantine-support --with-initconf-in=etcdir --with-loadedmodules=null:dot --without-pager --disable-avail-indepth --with-terminal-background=light --with-unload-match-order=returnfirst --disable-implicit-default --with-search-match=contains --with-locked-configs=extra_siteconfig' COVERAGE='y'
           EXTRA_SCRIPT_PRETEST='make install-testinitrc install-testsiteconfig' EXTRA_SCRIPT_POSTTEST='make uninstall-testconfig'
      addons:
        apt:
          sources:
            - sourceline: 'ppa:fish-shell/release-2'
          packages:
            - expect-dev
            - dejagnu
            - python-sphinx
            - bash
            - tcsh
            - ksh
            - zsh
            - fish
            - tcl8.4
            - perl
            - python
            - ruby
            - cmake3
            - r-base-core
            # libtclenvmodules and compatibility version build requirements
            - gcc
            - autoconf
            - tcl8.4-dev
            # compatibility version-specific build requirements
            - automake
            - autopoint
    - env: CONFIGURE_OPTS='--with-tclsh=tclsh8.5 --prefix=/tmp/modules --enable-compat-version --with-tcl=/usr/lib/tcl8.5 --disable-quarantine-support --with-loadedmodules=null:dot --with-pager=more --with-dark-background-colors=hi --with-locked-configs=implicit_default --enable-wa-277 --enable-advanced-version-spec --disable-ml' COVERAGE='y'
           EXTRA_SCRIPT_PRETEST='make install-testmodulerc-1 install-testetcrc install-testmodspath' EXTRA_SCRIPT_POSTTEST='make uninstall-testconfig'
      addons:
        apt:
          sources:
            - sourceline: 'ppa:fish-shell/release-2'
          packages:
            - expect-dev
            - dejagnu
            - python-sphinx
            - bash
            - tcsh
            - ksh
            - zsh
            - fish
            - tcl8.5
            - perl
            - python
            - ruby
            - cmake3
            - r-base-core
            # libtclenvmodules and compatibility version build requirements
            - gcc
            - autoconf
            - tcl8.5-dev
            # compatibility version-specific build requirements
            - automake
            - autopoint
    - env: CONFIGURE_OPTS='--with-tclsh=tclsh8.6 --prefix=/tmp/modules --enable-compat-version --with-tcl=/usr/lib/tcl8.6 --enable-append-manpath --enable-append-binpath --with-bin-search-path=/usr/bin:/bin --disable-silent-shell-debug-support --enable-windows-support --with-loadedmodules=null:dot --with-quarantine-vars=LD_LIBRARY_PATH --enable-color --with-dark-background-colors=hi=1:se=2:er=91:wa=93:mp=1;94:di=94:al=96:sy=95'
           EXTRA_SCRIPT_CD='modules-1.2.3+branch_name-91-g6dd3db49'
      addons:
        apt:
          sources:
            - sourceline: 'ppa:fish-shell/release-2'
          packages:
            - expect-dev
            - dejagnu
            - python-sphinx
            - bash
            - tcsh
            - ksh
            - zsh
            - fish
            - tcl8.6
            - perl
            - python
            - ruby
            - cmake3
            - r-base-core
            # libtclenvmodules and compatibility version build requirements
            - gcc
            - autoconf
            - tcl8.6-dev
            # compatibility version-specific build requirements
            - automake
            - autopoint
    # install specific siteconfig file before test to trigger specific behaviors
    # content of this specific siteconfig is activated by defining a TESTSUITE_ENABLE_SITECONFIG env var
    # siteconfig is deactivated for testinstall suite, will be handled locally in this test suite
    - env: CONFIGURE_OPTS='--with-tclsh=tclsh8.6 --prefix=/tmp/modules --disable-compat-version' COVERAGE='y' COVERAGE_OLDTCL='y'
           EXTRA_SCRIPT_PRETEST='make install-testsiteconfig-1 && export TESTSUITE_ENABLE_SITECONFIG=1'
           EXTRA_SCRIPT_POSTTEST='unset TESTSUITE_ENABLE_SITECONFIG'
      addons:
        apt:
          sources:
            - sourceline: 'ppa:fish-shell/release-2'
          packages:
            - expect-dev
            - dejagnu
            - python-sphinx
            - bash
            - tcsh
            - ksh
            - zsh
            - fish
            - tcl8.6
            - perl
            - python
            - ruby
            - cmake3
            - r-base-core
            # libtclenvmodules build requirements
            - gcc
            - autoconf
            - tcl8.6-dev
    - env: CONFIGURE_OPTS='--with-tclsh=tclsh8.4 --prefix=/tmp/modules --disable-compat-version --with-tcl=/usr/lib/tcl8.4' COVERAGE='y'
           EXTRA_SCRIPT_PRETEST='make install-testsiteconfig-1 && export TESTSUITE_ENABLE_SITECONFIG=1'
           EXTRA_SCRIPT_POSTTEST='unset TESTSUITE_ENABLE_SITECONFIG'
      addons:
        apt:
          sources:
            - sourceline: 'ppa:fish-shell/release-2'
          packages:
            - expect-dev
            - dejagnu
            - python-sphinx
            - bash
            - tcsh
            - ksh
            - zsh
            - fish
            - tcl8.4
            - perl
            - python
            - ruby
            - cmake3
            - r-base-core
            # libtclenvmodules build requirements
            - gcc
            - autoconf
            - tcl8.4-dev

    # CentOS tests
    - env: OS_NAME=centos OS_VERSION=6 DOCKER_IMAGE=${OS_NAME}:${OS_NAME}${OS_VERSION} CONTAINER=${OS_NAME}${OS_VERSION}
           CMD_PREFIX="docker exec --env RUNTESTFLAGS=-v $CONTAINER"
           CONFIGURE_OPTS='--disable-compat-version'
      sudo: required
      services:
        - docker

    - env: OS_NAME=centos OS_VERSION=7 DOCKER_IMAGE=${OS_NAME}:${OS_NAME}${OS_VERSION} CONTAINER=${OS_NAME}${OS_VERSION}
           CMD_PREFIX="docker exec --env RUNTESTFLAGS=-v $CONTAINER"
           CONFIGURE_OPTS='--disable-compat-version'
      sudo: required
      services:
        - docker

    # same configuration than above with Tcl extension lib disabled to compare performances over a loaded system
    - env: OS_NAME=centos OS_VERSION=7 DOCKER_IMAGE=${OS_NAME}:${OS_NAME}${OS_VERSION} CONTAINER=${OS_NAME}${OS_VERSION}
           CMD_PREFIX="docker exec --env RUNTESTFLAGS=-v $CONTAINER"
           CONFIGURE_OPTS='--disable-compat-version --disable-libtclenvmodules'
      sudo: required
      services:
        - docker

    # also enable a display on this test case to validate x-resource behavior
    - env: OS_NAME=centos OS_VERSION=6 DOCKER_IMAGE=${OS_NAME}:${OS_NAME}${OS_VERSION} CONTAINER=${OS_NAME}${OS_VERSION}
           CMD_PREFIX="docker exec --env RUNTESTFLAGS=-v $CONTAINER xvfb-run"
           CONFIGURE_OPTS='--prefix=/tmp/modules --enable-compat-version --with-loadedmodules=null:dot --with-quarantine-vars=LD_LIBRARY_PATH'
           EXTRA_PKGS='xorg-x11-server-utils xorg-x11-server-Xvfb automake gettext-devel'
      sudo: required
      services:
        - docker

    - env: OS_NAME=centos OS_VERSION=7 DOCKER_IMAGE=${OS_NAME}:${OS_NAME}${OS_VERSION} CONTAINER=${OS_NAME}${OS_VERSION}
           CMD_PREFIX="docker exec --env RUNTESTFLAGS=-v $CONTAINER xvfb-run"
           CONFIGURE_OPTS='--prefix=/tmp/modules --enable-compat-version --with-loadedmodules=null:dot --with-quarantine-vars=LD_LIBRARY_PATH'
           EXTRA_PKGS='which xorg-x11-server-utils xorg-x11-server-Xvfb automake gettext-devel'
      sudo: required
      services:
        - docker

    # openSUSE
    - env: OS_NAME=opensuse OS_VERSION=leap DOCKER_IMAGE=${OS_NAME}/${OS_VERSION} CONTAINER=${OS_VERSION}
           CMD_PREFIX="docker exec --env RUNTESTFLAGS=-v $CONTAINER"
           CONFIGURE_OPTS='--disable-compat-version --enable-versioning'
      sudo: required
      services:
        - docker

    # also enable a display on this test case to validate x-resource behavior
    - env: OS_NAME=opensuse OS_VERSION=leap DOCKER_IMAGE=${OS_NAME}/${OS_VERSION} CONTAINER=${OS_VERSION}
           CMD_PREFIX="docker exec --env RUNTESTFLAGS=-v $CONTAINER xvfb-run"
           CONFIGURE_OPTS='--prefix=/tmp/modules --enable-compat-version --enable-versioning --with-loadedmodules=null:dot --with-quarantine-vars=LD_LIBRARY_PATH'
           EXTRA_PKGS='which xrdb xvfb-run automake gettext-tools'
      sudo: required
      services:
        - docker

    # OSX tests
    - env: CONFIGURE_OPTS='--prefix=/tmp/modules --disable-compat-version --disable-libtclenvmodules' COVERAGE='y'
      os: osx

    # need to specify where to find tclConfig.sh on newer xcode release
    - env: CONFIGURE_OPTS='--prefix=/tmp/modules --enable-compat-version --with-loadedmodules=null:dot --with-tcl=/System/Library/Frameworks/Tcl.framework/Versions/8.5'
      os: osx


env:
  global:
    - RUNTESTFLAGS='-v'
    - CMD_PREFIX=''
    - EXTRA_PKGS=''

install: true

before_install: |
  if [ -n "$DOCKER_IMAGE" ]; then
    sudo apt-get install -y expect-dev
    docker pull $DOCKER_IMAGE &&
    docker run --name $CONTAINER --detach --rm -i -t -w /modules -e TRAVIS='true' $DOCKER_IMAGE /bin/bash
    case "${OS_NAME}" in
      centos)
        if [ $OS_VERSION -eq 6 ]; then SPHINX_PKG='python-sphinx10' MAN_PKG='man'; else SPHINX_PKG='python-sphinx' MAN_PKG='man-db'; fi
        docker exec $CONTAINER yum install -y epel-release &&
        docker exec $CONTAINER yum install -y tcsh zsh ksh tcl perl python ruby cmake R-core make wget perl $SPHINX_PKG git dejagnu $MAN_PKG rpm-build bzip2 autoconf gcc tcl-devel $EXTRA_PKGS &&
        docker exec $CONTAINER wget -O /etc/yum.repos.d/shells_fish_release_2.repo http://download.opensuse.org/repositories/shells:fish:release:2/CentOS_${OS_VERSION}/shells:fish:release:2.repo &&
        docker exec $CONTAINER yum install -y fish ;;
      opensuse)
        docker exec $CONTAINER zypper install -y tcsh zsh ksh fish tcl perl python ruby cmake R-core R-core-packages make wget python-Sphinx git dejagnu man net-tools autoconf gcc tcl-devel $EXTRA_PKGS ;;
    esac
    docker cp ./. $CONTAINER:modules
  elif [ "$TRAVIS_OS_NAME" = 'osx' ]; then
    brew update && brew upgrade wget && brew install expect dejagnu grep fish
  else
    true
  fi

# optionally change dir to launch tests from path containing specific chars
before_script: |
  if [ -n "$EXTRA_SCRIPT_CD" ]; then
    cd -
    mv $TRAVIS_BUILD_DIR $EXTRA_SCRIPT_CD
    cd $EXTRA_SCRIPT_CD
  else
    true
  fi

script:
  - $CMD_PREFIX ./configure $CONFIGURE_OPTS
  - $CMD_PREFIX make
  - if [ -n "$EXTRA_SCRIPT_PRETEST" ]; then $CMD_PREFIX eval $EXTRA_SCRIPT_PRETEST; fi
  - travis_wait 25 unbuffer $CMD_PREFIX script/mt
  - if [ -n "$EXTRA_SCRIPT_POSTTEST" ]; then $CMD_PREFIX eval $EXTRA_SCRIPT_POSTTEST; fi
  - $CMD_PREFIX make install
  - $CMD_PREFIX script/mt install
  - $CMD_PREFIX make uninstall
  - if [ "$OS_NAME" = 'centos' ]; then $CMD_PREFIX make srpm; fi

# report code coverage results
after_success: |
  [ "$COVERAGE" = 'y' ] &&
  script/nglfar2ccov modulecmd-test.tcl &&
  bash <(curl -s https://codecov.io/bash)

after_script: |
  [ -n "$DOCKER_IMAGE" ] &&
  docker stop $CONTAINER
