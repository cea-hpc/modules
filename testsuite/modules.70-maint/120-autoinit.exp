##############################################################################
#   Modules Revision 3.0
#   Providing a flexible user environment
#
#   File:		modules.70-maint/%M%
#   Revision:		%I%
#   First Edition:	2017/05/20
#   Last Mod.:		%U%, %G%
#
#   Authors:		Xavier Delaruelle, xavier.delaruelle@cea.fr
#
#   Description:	Testuite testsequence
#   Command:		autoinit
#   Modulefiles:
#   Sub-Command:
#
#   Comment:	%C{
#			Tests the module command 'autoinit'
#		}C%
#
##############################################################################

#
#  Test variables
#

set path_list {}
foreach elt [file split [file join [pwd] $MODULECMD]] {
    if {$elt ne "."} {
        lappend path_list $elt
    }
}
set modulecmd_path [eval file join $path_list]
set modulecmd_pathre [regsub -all "\(\[.+?\]\)" $modulecmd_path {\\\1}]
set moduleshome $install_prefix

# compare init config files to determine if we can guess expected setup
set insmodspath [file readable $install_initdir/.modulespath]
set modspath_exinstalled 0
if {[file readable $env(TESTSUITEDIR)/example/.modulespath]} {
    set fid [open $env(TESTSUITEDIR)/example/.modulespath r]
    set exmodspathdata [split [read $fid] "\n"]
    close $fid
    if {$insmodspath} {
        set fid [open $install_initdir/.modulespath r]
        set insmodspathdata [split [read $fid] "\n"]
        close $fid
    } else {
        set insmodspathdata ""
    }
    if {$exmodspathdata eq $insmodspathdata} {
        set modspath_exinstalled 1
    }
}

set insmodrc [file readable $install_initdir/modulerc]
set modrc_exinstalled 0
if {[file readable $env(TESTSUITEDIR)/example/modulerc]} {
    set fid [open $env(TESTSUITEDIR)/example/modulerc r]
    set exmodrcdata [split [read $fid] "\n"]
    close $fid
    if {$insmodrc} {
        set fid [open $install_initdir/modulerc r]
        set insmodrcdata [split [read $fid] "\n"]
        set insmodrc 1
        close $fid
    } else {
        set insmodrcdata ""
    }
    if {$exmodrcdata eq $insmodrcdata} {
        set modrc_exinstalled 1
    }
}

# check if stderr terminal attachement state is forced
set is_stderr_tty [siteconfig_isStderrTty]
if { $verbose > 0 } {
    send_user "\tIs STDERR a TTY? = '$is_stderr_tty'\n"
}

set err_lisp "$error_msgs: lisp mode autoinit not yet implemented"
set err_cmd "$error_msgs: No autoinit mode available for 'cmd' shell"

if {$install_quarantinesupport eq y} {
set end_quar_sh "\\s*if \\\[ \"\\\${_mlv}\" = \"\\\${_mlv##\\\*\\\[\\\!A-Za-z0-9_\\\]}\" -a \"\\\${_mlv}\" = \"\\\${_mlv#\\\[0-9\\\]}\" \\\]; then
\\s*if \\\[ -n \"`eval 'echo \\\${'\\\$_mlv'\\\+x}'`\" \\\]; then
\\s*_mlre=\"\\\${_mlre:-}\\\${_mlv}_modquar='`eval 'echo \\\${'\\\$_mlv'}'`' \";
\\s*fi;
\\s*_mlrv=\"MODULES_RUNENV_\\\${_mlv}\";
\\s*_mlre=\"\\\${_mlre:-}\\\${_mlv}='`eval 'echo \\\${'\\\$_mlrv':-}'`' \";
\\s*fi;
\\s*done;"
set func_quar_sh "\\s*unset _mlre _mlIFS;
\\s*if \\\[ -n \"\\\${IFS\\\+x}\" \\\]; then
\\s*_mlIFS=\\\$IFS;
\\s*fi;
\\s*IFS=' ';
\\s*for _mlv in \\\${MODULES_RUN_QUARANTINE:-}; do
$end_quar_sh\n"
set func_quar_zsh "\\s*unset _mlre _mlIFS;
\\s*if \\\[ -n \"\\\${IFS\\\+x}\" \\\]; then
\\s*_mlIFS=\\\$IFS;
\\s*fi;
\\s*IFS=' ';
\\s*for _mlv in \\\${=MODULES_RUN_QUARANTINE:-}; do
$end_quar_sh\n"
} else {
set end_quar_sh ""
set func_quar_sh ""
set func_quar_zsh ""
}

if {$install_silentshdbgsupport eq y} {
set func_silentdbg "\\s*unset _mlshdbg;
\\s*if \\\[ \"\\\${MODULES_SILENT_SHELL_DEBUG:-0}\" = '1' \\\]; then
\\s*case \"\\\$-\" in
\\s*\\\*v\\\*x\\\*\\\) set \\\+vx; _mlshdbg='vx' ;;
\\s*\\\*v\\\*\\\) set \\\+v; _mlshdbg='v' ;;
\\s*\\\*x\\\*\\\) set \\\+x; _mlshdbg='x' ;;
\\s*\\\*\\\) _mlshdbg='' ;;
\\s*esac;
\\s*fi;\n"
set end_silentdbg "\\s*if \\\[ -n \"\\\${_mlshdbg:-}\" \\\]; then
\\s*set -\\\$_mlshdbg;
\\s*fi;
\\s*unset _mlshdbg;\n"
} else {
set func_silentdbg ""
set end_silentdbg ""
}

if {$install_quarantinesupport eq y} {
set func_clean_ifs "\\s*if \\\[ -n \"\\\${_mlIFS\\\+x}\" \\\]; then
\\s*IFS=\\\$_mlIFS;
\\s*else
\\s*unset IFS;
\\s*fi;
\\s*unset _mlre _mlv _mlrv _mlIFS;\n"
} else {
set func_clean_ifs ""
}
set func_end "\\s*_mlstatus=\\\$\\\?;\n$func_clean_ifs$end_silentdbg\\s*return \\\$_mlstatus;"

if {$install_quarantinesupport eq y} {
set func_modcmd_sh "\\s*if \\\[ -n \"\\\${_mlre:-}\" \\\]; then
\\s*eval `eval \\\${_mlre}$install_tclsh $modulecmd_pathre sh '\"\\$\\@\"'`;
\\s*else
\\s*eval `$install_tclsh $modulecmd_pathre sh \"\\$\\@\"`;
\\s*fi;"
set func_modcmd_bash "\\s*if \\\[ -n \"\\\${_mlre:-}\" \\\]; then
\\s*eval `eval \\\${_mlre}$install_tclsh $modulecmd_pathre bash '\"\\$\\@\"'`;
\\s*else
\\s*eval `$install_tclsh $modulecmd_pathre bash \"\\$\\@\"`;
\\s*fi;"
set func_modcmd_ksh "\\s*if \\\[ -n \"\\\${_mlre:-}\" \\\]; then
\\s*eval `eval \\\${_mlre}$install_tclsh $modulecmd_pathre ksh '\"\\$\\@\"'`;
\\s*else
\\s*eval `$install_tclsh $modulecmd_pathre ksh \"\\$\\@\"`;
\\s*fi;"
set func_modcmd_zsh "\\s*if \\\[ -n \"\\\${_mlre:-}\" \\\]; then
\\s*eval `eval \\\${=_mlre}$install_tclsh $modulecmd_pathre zsh '\"\\$\\@\"'`;
\\s*else
\\s*eval `$install_tclsh $modulecmd_pathre zsh \"\\$\\@\"`;
\\s*fi;"
} else {
set func_modcmd_sh "\\s*eval `$install_tclsh $modulecmd_pathre sh \"\\$\\@\"`;"
set func_modcmd_bash "\\s*eval `$install_tclsh $modulecmd_pathre bash \"\\$\\@\"`;"
set func_modcmd_ksh "\\s*eval `$install_tclsh $modulecmd_pathre ksh \"\\$\\@\"`;"
set func_modcmd_zsh "\\s*eval `$install_tclsh $modulecmd_pathre zsh \"\\$\\@\"`;"
}

if {$is_stderr_tty} {
    set func_name "_module_raw"
    set add_func_sh "\nmodule\\\(\\\) { _module_raw \"\\\$\\\@\" 2>&1; };"
    set add_func_fish "\nfunction module\n\\s*_module_raw \\\$argv \\\^&1\nend"
} else {
    set func_name "module"
    set add_func_sh ""
    set add_func_fish ""
}

set func_sh "$func_name\\\(\\\) {\n$func_silentdbg$func_quar_sh$func_modcmd_sh\n$func_end\n};$add_func_sh"
set func_bash "$func_name\\\(\\\) {\n$func_silentdbg$func_quar_sh$func_modcmd_bash\n$func_end\n};$add_func_sh"
set func_ksh "$func_name\\\(\\\) {\n$func_silentdbg$func_quar_sh$func_modcmd_ksh\n$func_end\n};$add_func_sh"
set func_zsh "$func_name\\\(\\\) {\n$func_silentdbg$func_quar_zsh$func_modcmd_zsh\n$func_end\n};$add_func_sh"
set func_csh "if \\\( \\\$\\\?histchars && \\\$\\\?prompt \\\) alias module 'set _histchars = \\\$histchars; unset histchars; set _prompt=\\\$prompt:q; set prompt=\"\"; eval \"`$install_tclsh $modulecmd_pathre csh \\\\!\\*:q`\"; set _exit=\"\\\$status\"; set histchars = \\\$_histchars; unset _histchars; set prompt=\\\$_prompt:q; unset _prompt; test 0 = \\\$_exit' ;
if \\\( \\\$\\\?histchars && \\\! \\\$\\\?prompt \\\) alias module 'set _histchars = \\\$histchars; unset histchars; eval \"`$install_tclsh $modulecmd_pathre csh \\\\!\\*:q`\"; set _exit=\"\\\$status\"; set histchars = \\\$_histchars; unset _histchars; test 0 = \\\$_exit' ;
if \\\( \\\! \\\$\\\?histchars && \\\$\\\?prompt \\\) alias module 'set _prompt=\\\$prompt:q; set prompt=\"\"; eval \"`$install_tclsh $modulecmd_pathre csh \\\\!\\*:q`\"; set _exit=\"\\\$status\"; set prompt=\\\$_prompt:q; unset _prompt; test 0 = \\\$_exit' ;
if \\\( \\\! \\\$\\\?histchars && \\\! \\\$\\\?prompt \\\) alias module 'eval \"`$install_tclsh $modulecmd_pathre csh \\\\!\\*:q`\";' ;"
set func_tcsh "if \\\( \\\$\\\?histchars && \\\$\\\?prompt \\\) alias module 'set _histchars = \\\$histchars; unset histchars; set _prompt=\\\$prompt:q; set prompt=\"\"; eval \"`$install_tclsh $modulecmd_pathre tcsh \\\\!\\*:q`\"; set _exit=\"\\\$status\"; set histchars = \\\$_histchars; unset _histchars; set prompt=\\\$_prompt:q; unset _prompt; test 0 = \\\$_exit' ;
if \\\( \\\$\\\?histchars && \\\! \\\$\\\?prompt \\\) alias module 'set _histchars = \\\$histchars; unset histchars; eval \"`$install_tclsh $modulecmd_pathre tcsh \\\\!\\*:q`\"; set _exit=\"\\\$status\"; set histchars = \\\$_histchars; unset _histchars; test 0 = \\\$_exit' ;
if \\\( \\\! \\\$\\\?histchars && \\\$\\\?prompt \\\) alias module 'set _prompt=\\\$prompt:q; set prompt=\"\"; eval \"`$install_tclsh $modulecmd_pathre tcsh \\\\!\\*:q`\"; set _exit=\"\\\$status\"; set prompt=\\\$_prompt:q; unset _prompt; test 0 = \\\$_exit' ;
if \\\( \\\! \\\$\\\?histchars && \\\! \\\$\\\?prompt \\\) alias module 'eval \"`$install_tclsh $modulecmd_pathre tcsh \\\\!\\*:q`\";' ;"

if {$install_quarantinesupport eq y} {
set func_fish "function $func_name
\\s*set -l _mlre ''; set -l _mlv; set -l _mlrv;
\\s*for _mlv in \\\(string split ' ' \\\$MODULES_RUN_QUARANTINE\\\)
\\s*if string match -r '\\\^\\\[A-Za-z_\\\]\\\[A-Za-z0-9_\\\]\\\*\\\$' \\\$_mlv >/dev/null
\\s*if set -q \\\$_mlv
\\s*set _mlre \\\$_mlre\\\$_mlv\"_modquar='\\\$\\\$_mlv' \"
\\s*end
\\s*set _mlrv \"MODULES_RUNENV_\\\$_mlv\"
\\s*set _mlre \"\\\$_mlre\\\$_mlv='\\\$\\\$_mlrv' \"
\\s*end
\\s*end
\\s*if \\\[ -n \"\\\$_mlre\" \\\]
\\s*set _mlre \"env \\\$_mlre\"
\\s*end
\\s*eval \\\$_mlre $install_tclsh $modulecmd_pathre fish \\\(string escape -- \\\$argv\\\) \\\| source -
end$add_func_fish"
set func_tcl "proc module {args} {
\\s*set _mlre {};
\\s*if {\\\[info exists ::env\\\(MODULES_RUN_QUARANTINE\\\)\\\]} {
\\s*foreach _mlv \\\[split \\\$::env\\\(MODULES_RUN_QUARANTINE\\\) \" \"\\\] {
\\s*if {\\\[regexp {\\\^\\\[A-Za-z_\\\]\\\[A-Za-z0-9_\\\]\\\*\\\$} \\\$_mlv\\\]} {
\\s*if {\\\[info exists ::env\\\(\\\$_mlv\\\)\\\]} {
\\s*lappend _mlre \"\\\${_mlv}_modquar=\\\$::env\\\(\\\$_mlv\\\)\"
\\s*}
\\s*set _mlrv \"MODULES_RUNENV_\\\${_mlv}\"
\\s*lappend _mlre \\\[expr {\\\[info exists ::env\\\(\\\$_mlrv\\\)\\\] \\\? \"\\\${_mlv}=\\\$::env\\\(\\\$_mlrv\\\)\" : \"\\\${_mlv}=\"}\\\]
\\s*}
\\s*}
\\s*if {\\\[llength \\\$_mlre\\\] > 0} {
\\s*set _mlre \\\[linsert \\\$_mlre 0 \"env\"\\\]
\\s*}
\\s*}
\\s*set _mlstatus 1;
\\s*catch {eval exec \\\$_mlre \"$install_tclsh\" \"$modulecmd_pathre\" \"tcl\" \\\$args 2>@stderr} script
\\s*eval \\\$script;
\\s*return \\\$_mlstatus
}"
set func_perl "sub module {
\\s*my \\\$_mlre = '';
\\s*if \\\(defined \\\$ENV{'MODULES_RUN_QUARANTINE'}\\\) {
\\s*foreach my \\\$_mlv \\\(split\\\(' ', \\\$ENV{'MODULES_RUN_QUARANTINE'}\\\)\\\) {
\\s*if \\\(\\\$_mlv =~ \\\/\\\^\\\[A-Za-z_\\\]\\\[A-Za-z0-9_\\\]\\\*\\\$\\\/\\\) {
\\s*if \\\(defined \\\$ENV{\\\$_mlv}\\\) {
\\s*\\\$_mlre .= \"\\\${_mlv}_modquar='\\\$ENV{\\\$_mlv}' \";
\\s*}
\\s*my \\\$_mlrv = \"MODULES_RUNENV_\\\$_mlv\";
\\s*\\\$_mlre .= \"\\\$_mlv='\\\$ENV{\\\$_mlrv}' \";
\\s*}
\\s*}
\\s*if \\\(\\\$_mlre ne \"\"\\\) {
\\s*\\\$_mlre = \"env \\\$_mlre\";
\\s*}
\\s*}
\\s*my \\\$args = '';
\\s*if \\\(\\\@_ > 0\\\) {
\\s*\\\$args = '\"' \\\. join\\\('\" \"', \\\@_\\\) \\\. '\"';
\\s*}
\\s*my \\\$_mlstatus = 1;
\\s*eval `\\\${_mlre}$install_tclsh $modulecmd_pathre perl \\\$args`;
\\s*return \\\$_mlstatus;
}"
set func_python "import re, subprocess
def module\\\(\\*arguments\\\):
\\s*_mlre = os.environ.copy\\\(\\\)
\\s*if 'MODULES_RUN_QUARANTINE' in os.environ:
\\s*for _mlv in os.environ\\\['MODULES_RUN_QUARANTINE'\\\].split\\\(\\\):
\\s*if re.match\\\('\\\^\\\[A-Za-z_\\\]\\\[A-Za-z0-9_\\\]\\\*\\\$', _mlv\\\):
\\s*if _mlv in os.environ:
\\s*_mlre\\\[_mlv \\\+ '_modquar'\\\] = os.environ\\\[_mlv\\\]
\\s*_mlrv = 'MODULES_RUNENV_' \\\+ _mlv
\\s*if _mlrv in os.environ:
\\s*_mlre\\\[_mlv\\\] = os.environ\\\[_mlrv\\\]
\\s*else:
\\s*_mlre\\\[_mlv\\\] = ''
\\s*ns = {}
\\s*exec\\\(subprocess\\.Popen\\\(\\\['$install_tclsh', '$modulecmd_pathre', 'python'\\\] \\+ list\\\(arguments\\\), stdout=subprocess\\.PIPE, env=_mlre\\\)\\.communicate\\\(\\\)\\\[0\\\], ns\\\)
\\s*if '_mlstatus' in ns:
\\s*_mlstatus = ns\\\['_mlstatus'\\\]
\\s*else:
\\s*_mlstatus = True
\\s*return _mlstatus"
set func_ruby "class ENVModule
\\s*def ENVModule.module\\\(\\*args\\\)
\\s*_mlre = ''
\\s*if ENV.has_key\\\?\\\('MODULES_RUN_QUARANTINE'\\\) then
\\s*ENV\\\['MODULES_RUN_QUARANTINE'\\\].split\\\(' '\\\).each do \\\|_mlv\\\|
\\s*if _mlv =~ \\\/\\\^\\\[A-Za-z_\\\]\\\[A-Za-z0-9_\\\]\\\*\\\$\\\/ then
\\s*if ENV.has_key\\\?\\\(_mlv\\\) then
\\s*_mlre << _mlv \\\+ \"_modquar='\" \\\+ ENV\\\[_mlv\\\].to_s \\\+ \"' \"
\\s*end
\\s*_mlrv = 'MODULES_RUNENV_' \\\+ _mlv
\\s*_mlre << _mlv \\\+ \"='\" \\\+ ENV\\\[_mlrv\\\].to_s \\\+ \"' \"
\\s*end
\\s*end
\\s*unless _mlre.empty\\\?
\\s*_mlre = 'env ' \\\+ _mlre
\\s*end
\\s*end
\\s*if args\\\[0\\\].kind_of\\?\\\(Array\\\) then
\\s*args = args\\\[0\\\]
\\s*end
\\s*if args.length == 0 then
\\s*args = ''
\\s*else
\\s*args = \"\\\\\"#{args.join\\\('\" \"'\\\)}\\\\\"\"
\\s*end
\\s*_mlstatus = true
\\s*eval `#{_mlre}$install_tclsh $modulecmd_pathre ruby #{args}`
\\s*return _mlstatus
\\s*end
end"
set func_cmake "function\\\(module\\\)
\\s*cmake_policy\\\(SET CMP0007 NEW\\\)
\\s*set\\\(_mlre \"\"\\\)
\\s*if\\\(DEFINED ENV{MODULES_RUN_QUARANTINE}\\\)
\\s*string\\\(REPLACE \" \" \";\" _mlv_list \"\\\$ENV{MODULES_RUN_QUARANTINE}\"\\\)
\\s*foreach\\\(_mlv \\\${_mlv_list}\\\)
\\s*if\\\(\\\${_mlv} MATCHES \"\\\^\\\[A-Za-z_\\\]\\\[A-Za-z0-9_\\\]\\\*\\\$\"\\\)
\\s*if\\\(DEFINED ENV{\\\${_mlv}}\\\)
\\s*set\\\(_mlre \"\\\${_mlre}\\\${_mlv}_modquar=\\\$ENV{\\\${_mlv}};\"\\\)
\\s*endif\\\(\\\)
\\s*set\\\(_mlrv \"MODULES_RUNENV_\\\${_mlv}\"\\\)
\\s*set\\\(_mlre \"\\\${_mlre}\\\${_mlv}=\\\$ENV{\\\${_mlrv}};\"\\\)
\\s*endif\\\(\\\)
\\s*endforeach\\\(\\\)
\\s*if \\\(NOT \"\\\${_mlre}\" STREQUAL \"\"\\\)
\\s*set\\\(_mlre \"env;\\\${_mlre}\"\\\)
\\s*endif\\\(\\\)
\\s*endif\\\(\\\)
\\s*set\\\(_mlstatus TRUE\\\)
\\s*execute_process\\\(COMMAND mktemp -t moduleinit.cmake.XXXXXXXXXXXX
\\s*OUTPUT_VARIABLE tempfile_name
\\s*OUTPUT_STRIP_TRAILING_WHITESPACE\\\)
\\s*if\\\(\\\${ARGC} EQUAL 1\\\)
\\s*execute_process\\\(COMMAND \\\${_mlre} $install_tclsh $modulecmd_pathre cmake \"\\\${ARGV0}\"
\\s*OUTPUT_FILE \\\${tempfile_name}\\\)
\\s*elseif\\\(\\\${ARGC} EQUAL 2\\\)
\\s*execute_process\\\(COMMAND \\\${_mlre} $install_tclsh $modulecmd_pathre cmake \"\\\${ARGV0}\" \"\\\${ARGV1}\"
\\s*OUTPUT_FILE \\\${tempfile_name}\\\)
\\s*elseif\\\(\\\${ARGC} EQUAL 3\\\)
\\s*execute_process\\\(COMMAND \\\${_mlre} $install_tclsh $modulecmd_pathre cmake \"\\\${ARGV0}\" \"\\\${ARGV1}\" \"\\\${ARGV2}\"
\\s*OUTPUT_FILE \\\${tempfile_name}\\\)
\\s*elseif\\\(\\\${ARGC} EQUAL 4\\\)
\\s*execute_process\\\(COMMAND \\\${_mlre} $install_tclsh $modulecmd_pathre cmake \"\\\${ARGV0}\" \"\\\${ARGV1}\" \"\\\${ARGV2}\" \"\\\${ARGV3}\"
\\s*OUTPUT_FILE \\\${tempfile_name}\\\)
\\s*else\\\(\\\)
\\s*execute_process\\\(COMMAND \\\${_mlre} $install_tclsh $modulecmd_pathre cmake \\\${ARGV}
\\s*OUTPUT_FILE \\\${tempfile_name}\\\)
\\s*endif\\\(\\\)
\\s*if\\\(EXISTS \\\${tempfile_name}\\\)
\\s*include\\\(\\\${tempfile_name}\\\)
\\s*file\\\(REMOVE \\\${tempfile_name}\\\)
\\s*endif\\\(\\\)
\\s*set\\\(module_result \\\${_mlstatus} PARENT_SCOPE\\\)
endfunction\\\(module\\\)"
set func_r "module <- function\\\(...\\\){
\\s*mlre <- ''
\\s*if \\\(\\\!is.na\\\(Sys.getenv\\\('MODULES_RUN_QUARANTINE', unset=NA\\\)\\\)\\\) {
\\s*for \\\(mlv in strsplit\\\(Sys.getenv\\\('MODULES_RUN_QUARANTINE'\\\), ' '\\\)\\\[\\\[1\\\]\\\]\\\) {
\\s*if \\\(grepl\\\('\\\^\\\[A-Za-z_\\\]\\\[A-Za-z0-9_\\\]\\\*\\\$', mlv\\\)\\\) {
\\s*if \\\(\\\!is.na\\\(Sys.getenv\\\(mlv, unset=NA\\\)\\\)\\\) {
\\s*mlre <- paste0\\\(mlre, mlv, \"_modquar='\", Sys.getenv\\\(mlv\\\), \"' \"\\\)
\\s*}
\\s*mlrv <- paste0\\\('MODULES_RUNENV_', mlv\\\)
\\s*mlre <- paste0\\\(mlre, mlv, \"='\", Sys.getenv\\\(mlrv\\\), \"' \"\\\)
\\s*}
\\s*}
\\s*if \\\(mlre \\\!= ''\\\) {
\\s*mlre <- paste0\\\('env ', mlre\\\)
\\s*}
\\s*}
\\s*arglist <- as.list\\\(match.call\\\(\\\)\\\)
\\s*arglist\\\[1\\\] <- 'r'
\\s*args <- paste0\\\('\"', paste0\\\(arglist, collapse='\" \"'\\\), '\"'\\\)
\\s*cmd <- paste\\\(mlre, '$install_tclsh', '$modulecmd_pathre', args, sep=' '\\\)
\\s*mlstatus <- TRUE
\\s*hndl <- pipe\\\(cmd\\\)
\\s*eval\\\(expr = parse\\\(file=hndl\\\)\\\)
\\s*close\\\(hndl\\\)
\\s*invisible\\\(mlstatus\\\)
}"
} else {
set func_fish "function $func_name
\\s*eval $install_tclsh $modulecmd_pathre fish \\\(string escape -- \\\$argv\\\) \\\| source -
end$add_func_fish"
set func_tcl "proc module {args} {
\\s*set _mlstatus 1;
\\s*catch {eval exec \"$install_tclsh\" \"$modulecmd_pathre\" \"tcl\" \\\$args 2>@stderr} script
\\s*eval \\\$script;
\\s*return \\\$_mlstatus
}"
set func_perl "sub module {
\\s*my \\\$args = '';
\\s*if \\\(\\\@_ > 0\\\) {
\\s*\\\$args = '\"' \\\. join\\\('\" \"', \\\@_\\\) \\\. '\"';
\\s*}
\\s*my \\\$_mlstatus = 1;
\\s*eval `$install_tclsh $modulecmd_pathre perl \\\$args`;
\\s*return \\\$_mlstatus;
}"
set func_python "import re, subprocess
def module\\\(\\*arguments\\\):
\\s*ns = {}
\\s*exec\\\(subprocess\\.Popen\\\(\\\['$install_tclsh', '$modulecmd_pathre', 'python'\\\] \\+ list\\\(arguments\\\), stdout=subprocess\\.PIPE\\\)\\.communicate\\\(\\\)\\\[0\\\], ns\\\)
\\s*if '_mlstatus' in ns:
\\s*_mlstatus = ns\\\['_mlstatus'\\\]
\\s*else:
\\s*_mlstatus = True
\\s*return _mlstatus"
set func_ruby "class ENVModule
\\s*def ENVModule.module\\\(\\*args\\\)
\\s*if args\\\[0\\\].kind_of\\?\\\(Array\\\) then
\\s*args = args\\\[0\\\]
\\s*end
\\s*if args.length == 0 then
\\s*args = ''
\\s*else
\\s*args = \"\\\\\"#{args.join\\\('\" \"'\\\)}\\\\\"\"
\\s*end
\\s*_mlstatus = true
\\s*eval `$install_tclsh $modulecmd_pathre ruby #{args}`
\\s*return _mlstatus
\\s*end
end"
set func_cmake "function\\\(module\\\)
\\s*cmake_policy\\\(SET CMP0007 NEW\\\)
\\s*set\\\(_mlstatus TRUE\\\)
\\s*execute_process\\\(COMMAND mktemp -t moduleinit.cmake.XXXXXXXXXXXX
\\s*OUTPUT_VARIABLE tempfile_name
\\s*OUTPUT_STRIP_TRAILING_WHITESPACE\\\)
\\s*if\\\(\\\${ARGC} EQUAL 1\\\)
\\s*execute_process\\\(COMMAND $install_tclsh $modulecmd_pathre cmake \"\\\${ARGV0}\"
\\s*OUTPUT_FILE \\\${tempfile_name}\\\)
\\s*elseif\\\(\\\${ARGC} EQUAL 2\\\)
\\s*execute_process\\\(COMMAND $install_tclsh $modulecmd_pathre cmake \"\\\${ARGV0}\" \"\\\${ARGV1}\"
\\s*OUTPUT_FILE \\\${tempfile_name}\\\)
\\s*elseif\\\(\\\${ARGC} EQUAL 3\\\)
\\s*execute_process\\\(COMMAND $install_tclsh $modulecmd_pathre cmake \"\\\${ARGV0}\" \"\\\${ARGV1}\" \"\\\${ARGV2}\"
\\s*OUTPUT_FILE \\\${tempfile_name}\\\)
\\s*elseif\\\(\\\${ARGC} EQUAL 4\\\)
\\s*execute_process\\\(COMMAND $install_tclsh $modulecmd_pathre cmake \"\\\${ARGV0}\" \"\\\${ARGV1}\" \"\\\${ARGV2}\" \"\\\${ARGV3}\"
\\s*OUTPUT_FILE \\\${tempfile_name}\\\)
\\s*else\\\(\\\)
\\s*execute_process\\\(COMMAND $install_tclsh $modulecmd_pathre cmake \\\${ARGV}
\\s*OUTPUT_FILE \\\${tempfile_name}\\\)
\\s*endif\\\(\\\)
\\s*if\\\(EXISTS \\\${tempfile_name}\\\)
\\s*include\\\(\\\${tempfile_name}\\\)
\\s*file\\\(REMOVE \\\${tempfile_name}\\\)
\\s*endif\\\(\\\)
\\s*set\\\(module_result \\\${_mlstatus} PARENT_SCOPE\\\)
endfunction\\\(module\\\)"
set func_r "module <- function\\\(...\\\){
\\s*arglist <- as.list\\\(match.call\\\(\\\)\\\)
\\s*arglist\\\[1\\\] <- 'r'
\\s*args <- paste0\\\('\"', paste0\\\(arglist, collapse='\" \"'\\\), '\"'\\\)
\\s*cmd <- paste\\\('$install_tclsh', '$modulecmd_pathre', args, sep=' '\\\)
\\s*mlstatus <- TRUE
\\s*hndl <- pipe\\\(cmd\\\)
\\s*eval\\\(expr = parse\\\(file=hndl\\\)\\\)
\\s*close\\\(hndl\\\)
\\s*invisible\\\(mlstatus\\\)
}"
}

#
#  test autoinit command for the different shells
#

# setup environment state
setenv_loaded_module "foo" [list]

foreach shell $supported_shells {
    switch -- $shell {
        {lisp} {
            testouterr_cmd "lisp" "autoinit" "ERR" "$err_lisp"
        }
        {cmd} {
            testouterr_cmd "cmd" "autoinit" "ERR" "$err_cmd"
        }
        default {
            set ans [list]
            lappend ans [list [set "func_$shell"]]
            if {$install_versioning eq "y"} {
                lappend ans [list set MODULE_VERSION_STACK "(.*)"]
                lappend ans [list set MODULES_CMD $modulecmd_path]
                lappend ans [list set MODULESHOME $moduleshome]
                lappend ans [list set MODULE_VERSION "(.*)"]
            } else {
                lappend ans [list set MODULES_CMD $modulecmd_path]
                lappend ans [list set MODULESHOME $moduleshome]
            }

            test_cmd_re $shell "autoinit" $ans
        }
    }
}

# test versioning autoinit when MODULE_VERSION is already defined
if {$install_versioning eq "y"} {
    # setup environment state
    if { $verbose > 0 } {
        send_user "\tSetup MODULE_VERSION = 'vers'\n"
        send_user "\tSetup MODULE_VERSION_STACK = 'vers'\n"
    }
    set env(MODULE_VERSION) "vers"
    set env(MODULE_VERSION_STACK) "vers"

    set ans [list]
    lappend ans [list [set "func_sh"]]
    lappend ans [list set MODULES_CMD $modulecmd_path]
    lappend ans [list set MODULESHOME $moduleshome]

    test_cmd_re "sh" "autoinit" $ans

    # setup environment state
    if { $verbose > 0 } {
        send_user "\tUnset MODULE_VERSION\n"
        send_user "\tUnset MODULE_VERSION_STACK\n"
    }
    unset env(MODULE_VERSION)
    unset env(MODULE_VERSION_STACK)
}

# setup environment state
unsetenv_loaded_module
unsetenv_path_var MODULEPATH

if {(!$insmodspath || $modspath_exinstalled) && (!$insmodrc || $modrc_exinstalled)} {
    foreach shell $supported_shells {
        switch -- $shell {
            {lisp} {
                testouterr_cmd "lisp" "autoinit" "ERR" "$err_lisp"
            }
            {cmd} {
                testouterr_cmd "cmd" "autoinit" "ERR" "$err_cmd"
            }
            default {
                set ans [list]
                lappend ans [list [set "func_$shell"]]
                if {!$insmodspath && !$insmodrc} {
                    if {$install_versioning eq "y"} {
                        lappend ans [list set MODULE_VERSION_STACK "(.*)"]
                    }
                    lappend ans [list set MODULES_CMD $modulecmd_path]
                    lappend ans [list set LOADEDMODULES ""]
                    lappend ans [list set MODULESHOME $moduleshome]
                    lappend ans [list set MODULEPATH ""]
                    if {$install_versioning eq "y"} {
                        lappend ans [list set MODULE_VERSION "(.*)"]
                    }
                } elseif {$modspath_exinstalled} {
                    if {$install_versioning eq "y"} {
                        lappend ans [list set MODULE_VERSION_STACK "(.*)"]
                    }
                    lappend ans [list set MODULES_CMD $modulecmd_path]
                    lappend ans [list set MODULEPATH_modshare "(.*)"]
                    lappend ans [list set LOADEDMODULES ""]
                    lappend ans [list set MODULESHOME $moduleshome]
                    lappend ans [list set MODULEPATH "$install_modulepath:$install_prefix/test/modulefiles:$install_prefix/test/etc"]
                    if {$install_versioning eq "y"} {
                        lappend ans [list set MODULE_VERSION "(.*)"]
                    }
                } elseif {!$insmodspath && $modrc_exinstalled} {
                    lappend ans [list set _LMFILES__modshare "$install_modulefilesdir/null:1"]
                    lappend ans [list set LOADEDMODULES_modshare "null:1"]
                    if {$install_versioning eq "y"} {
                        lappend ans [list set MODULE_VERSION_STACK "(.*)"]
                    }
                    lappend ans [list set MODULES_CMD $modulecmd_path]
                    lappend ans [list set MODULEPATH_modshare "$install_modulepath:1"]
                    lappend ans [list set _LMFILES_ "$install_modulefilesdir/null"]
                    lappend ans [list set LOADEDMODULES "null"]
                    lappend ans [list set MODULESHOME $moduleshome]
                    lappend ans [list set MODULEPATH "$install_modulepath"]
                    if {$install_versioning eq "y"} {
                        lappend ans [list set MODULE_VERSION "(.*)"]
                    }
                }

                test_cmd_re $shell "autoinit" $ans
            }
        }
    }
} else {
    send_user "\tskipping autoinit tests as installed configuration unknown\n"
}

# restore environment state
setenv_path_var MODULEPATH $modpath


#
#  Cleanup
#

unset path_list
unset modulecmd_pathre
unset modulecmd_path
unset moduleshome

if {[info exists fid]} {
    unset fid
}
if {[info exists exmodspathdata]} {
    unset exmodspathdata
}
if {[info exists exmodrcdata]} {
    unset exmodrcdata
}
if {[info exists insmodspathdata]} {
    unset insmodspathdata
}
unset insmodspath
if {[info exists insmodrcdata]} {
    unset insmodrcdata
}
unset insmodrc
unset modspath_exinstalled
unset modrc_exinstalled

unset shell
unset ans

unset err_lisp
unset err_cmd

unset end_quar_sh
unset func_quar_sh
unset func_quar_zsh
unset func_clean_ifs
unset func_end
unset func_silentdbg

unset func_modcmd_sh
unset func_modcmd_bash
unset func_modcmd_ksh
unset func_modcmd_zsh

unset is_stderr_tty
unset func_name
unset add_func_sh
unset add_func_fish

unset func_sh
unset func_bash
unset func_ksh
unset func_zsh
unset func_csh
unset func_tcsh
unset func_fish
unset func_tcl
unset func_perl
unset func_python
unset func_ruby
unset func_cmake
unset func_r
