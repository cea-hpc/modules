#!/bin/sh
#
# INSTALL_TEST_SH, sh-kind test launcher for install non-reg suite
# Copyright (C) 2017-2022 Xavier Delaruelle
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

##########################################################################

progpath=$0
progdir=$(dirname $progpath)
[ -z "$progdir" ] && progdir='.'
ret=0

# print message on stderr then exit
echo_error() {
   echo -e "ERROR: $1" >&2
   exit 1
}

if [ $# -lt 4 ]; then
   # print usage message
   echo_error "Usage: $progpath initfile mode shell command"
fi

initfile=$1
shift
mode=$1
shift
sh=$1
shift
cmdlist=${@}

# get shell kind and options for sublaunch
shname=$(basename $sh)
if [ "$shname" = 'ksh93' ]; then
   shname='ksh'
fi
case "$shname" in
   bash|ksh|zsh)
      shkind='sh'
      ;;
   tcsh)
      shkind='csh'
      ;;
   *)
      shkind=$shname
esac
case "$shkind" in
   # ignore global csh system init file to avoid side effect
   csh)
      shopts='-f'
      ;;
   *)
      shopts=''
esac

# init module via autoinit cmd if modulecmd.tcl is initfile
if [ "$(basename "${initfile}")" = 'modulecmd.tcl' ]; then
   autoinit=0
else
   autoinit=1
fi

if [ $autoinit -eq 0 ] && [ ! -x "$initfile" ]; then
   echo_error "Cannot execute $initfile"
elif [ $autoinit -ne 0 ] && [ ! -r "$initfile" ]; then
   echo_error "Cannot read $initfile"
fi

# source module init file if first step of given mode
if [ "$mode" = 'top' ] || [ "$mode" = 'sub' ] || [ "$mode" = 'subsub' ]; then
   if [ $autoinit -eq 0 ]; then
      eval "$("$initfile" $shname autoinit)"
   else
      . "$initfile"
   fi
fi

# execute command list or perform recursive call
case "$mode" in
   top|launch)
      # enable alias resolution on bash for tests
      if [ "$shname" = 'bash' ]; then
         shopt -s expand_aliases
      # enable word splitting for the below loop on zsh
      elif [ "$shname" = 'zsh' ]; then
         setopt sh_word_split
      fi
      IFS=';'
      for cmd in ${cmdlist}; do
         unset IFS
         eval $cmd
         ret=$(($ret+$?))
         IFS=';'
      done
      unset IFS
      ;;
   sub|sublaunch)
      $sh $shopts $progdir/install_test_${shkind} "$initfile" launch $sh "$cmdlist"
      ret=$?
      ;;
   subsub)
      $sh $shopts $progdir/install_test_${shkind} "$initfile" sublaunch $sh "$cmdlist"
      ret=$?
      ;;
   *)
      echo_error "Unrecognized mode option. Valid mode are 'top', 'sub', 'subsub'"
esac

# throw command exit code
exit $ret

# vim:set tabstop=3 shiftwidth=3 expandtab autoindent:
