##############################################################################
#   Modules Revision 3.0
#   Providing a flexible user environment
#
#   File:		modules.50-cmds/%M%
#   Revision:		%I%
#   First Edition:	2018/10/14
#   Last Mod.:		%U%, %G%
#
#   Authors:		nanobowers <nanobowers@gmail.com>
#
#   Description:	Testsuite testsequence
#   Command:		load
#   Modulefiles:	function/1.0 function/2.0
#   Sub-Command:
#
#   Comment:	%C{
#			Tests 'set-function' command
#		}C%
#
##############################################################################

#
#  Variables. This test forces a module load command. It will result in the
#    environment variables "_LMFILES_", "LOADEDMODULES" and "testsuite" to
#    be set up
#

set module "function/1.0"
set modulefile "$modpath/$module"

# strictly speaking, this function is only valid for sh shells, not fish
set function {eval $(echo cd $1)}
set function_fish {eval (echo cd $argv[1])}

#
#  For the different shells ...
#

#lappend ans_empty [list function testsuite $function]
lappend ans_empty [list setpath LOADEDMODULES $module]
lappend ans_empty [list setpath _LMFILES_ $modulefile]

lappend ans_sh [list testsuite "() {" "$function; };" "export testsuite;"]
lappend ans_sh [list setpath LOADEDMODULES $module]
lappend ans_sh [list setpath _LMFILES_ $modulefile]

lappend ans_fish [list function "testsuite;" "$function_fish;" "end;"]
lappend ans_fish [list setpath LOADEDMODULES $module]
lappend ans_fish [list setpath _LMFILES_ $modulefile]

lappend ans_unsh [list unset "-g" testsuite]
lappend ans_unsh [list setpath LOADEDMODULES $module]
lappend ans_unsh [list setpath _LMFILES_ $modulefile]

#
#  set-function test via load
#

foreach sh $supported_shells {
    # only available for fish and sh derivatives
    # other shells do not get output for 'set-function'
    if {$sh eq "fish"} {
        test_cmd "$sh" "load $module" $ans_fish
    } elseif { [lsearch {sh bash ksh zsh} $sh] >= 0 } {
        test_cmd "$sh" "load $module" $ans_sh
    } else {
        test_cmd "$sh" "load $module" $ans_empty
    }
}

#
# Test special characters handling.
# Currently we are not hacking the function-string.
# Recommended use is to use {} for quoting the function body
#

set module "function/2.0"
set modulefile "$modpath/$module"

set function_sh {echo $(grep "report \"Modules " modulecmd.tcl | tr -d \\ | awk '{print $3}'); echo $1}
set function_fish {echo (grep "report \"Modules " modulecmd.tcl | tr -d \\ | awk '{print $3}'); echo $argv[1]}

set ans_empty [list]
lappend ans_empty [list setpath LOADEDMODULES $module]
lappend ans_empty [list setpath _LMFILES_ $modulefile]

set ans_sh [list]
lappend ans_sh [list testsuite "() {" "$function_sh; };" "export testsuite;"]
lappend ans_sh [list setpath LOADEDMODULES $module]
lappend ans_sh [list setpath _LMFILES_ $modulefile]

set ans_fish [list]
lappend ans_fish [list function "testsuite;" "$function_fish;" "end;"]
lappend ans_fish [list setpath LOADEDMODULES $module]
lappend ans_fish [list setpath _LMFILES_ $modulefile]



foreach sh $supported_shells {
    switch -- $sh {
        {sh} - {bash} - {ksh} - {zsh} {
            test_cmd $sh "load $module" $ans_sh
        }
        {fish} {
            test_cmd $sh "load $module" $ans_fish
        }
    }
}


#
#  Cleanup
#

unset sh
unset ans_fish
unset ans_sh
unset ans_empty

unset modulefile
unset module
unset function
unset function_sh
unset function_fish

